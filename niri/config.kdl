// This config is in the KDL format: https://kdl.dev
// "/-" comments out the following node.
// Check the wiki for a full description of the configuration:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Introduction

// Input device configuration.
// Find the full list of options on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Input
input {
    keyboard {
        xkb {
            layout "us,ru"
            options "grp:caps_toggle"
        }

        // Enable numlock on startup, omitting this setting disables it.
        numlock
    }

    // Next sections include libinput settings.
    // Omitting settings disables them, or leaves them at their default values.
    touchpad {
        // off
        tap
        dwt
        dwtp
        drag true
        drag-lock
        natural-scroll
        accel-speed 0.5
        // accel-profile "flat"
        scroll-method "two-finger"
        // disabled-on-external-mouse
        middle-emulation
    }

    mouse {
        // off
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "no-scroll"
    }

    trackpoint {
        // off
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "on-button-down"
        // scroll-button 273
        // middle-emulation
    }

    // Uncomment this to make the mouse warp to the center of newly focused windows.
    warp-mouse-to-focus

    // Focus windows and outputs automatically when moving the mouse into them.
    // Setting max-scroll-amount="0%" makes it work only on windows already fully on screen.
    focus-follows-mouse max-scroll-amount="0%"

    // Set main modifier key to Win/Super
    mod-key "Super"
}

// You can configure outputs by their name, which you can find
// by running `niri msg outputs` while inside a niri instance.
// The built-in laptop monitor is usually called "eDP-1".
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Outputs
// Remember to uncomment the node by removing "/-"!
output "HDMI-A-1" {
    mode "2560x1440"
    position x=0 y=0
    focus-at-startup
}

output "eDP-1" {
    mode "1920x1080"
    position x=320 y=1440
}

// Settings that influence how windows are positioned and sized.
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Layout
layout {
    // Set gaps around windows in logical pixels.
    gaps 10

    // When to center a column when changing focus, options are:
    // - "never", default behavior, focusing an off-screen column will keep at the left
    //   or right edge of the screen.
    // - "always", the focused column will always be centered.
    // - "on-overflow", focusing a column will center it if it doesn't fit
    //   together with the previously focused column.
    center-focused-column "never"

    // You can customize the widths that "switch-preset-column-width" (Mod+R) toggles between.
    preset-column-widths {
        // Proportion sets the width as a fraction of the output width, taking gaps into account.
        // For example, you can perfectly fit four windows sized "proportion 0.25" on an output.
        // The default preset widths are 1/3, 1/2 and 2/3 of the output.
        proportion 0.5
        proportion 1.0

        // Fixed sets the width in logical pixels exactly.
        // fixed 1920
    }

    // You can also customize the heights that "switch-preset-window-height" (Mod+Shift+R) toggles between.
    // preset-window-heights { }

    // You can change the default width of the new windows.
    default-column-width { proportion 0.5; }
    // If you leave the brackets empty, the windows themselves will decide their initial width.
    // default-column-width {}

    // By default focus ring and border are rendered as a solid background rectangle
    // behind windows. That is, they will show up through semitransparent windows.
    // This is because windows using client-side decorations can have an arbitrary shape.
    //
    // If you don't like that, you should uncomment `prefer-no-csd` below.
    // Niri will draw focus ring and border *around* windows that agree to omit their
    // client-side decorations.
    //
    // Alternatively, you can override it with a window rule called
    // `draw-border-with-background`.

    // You can change how the focus ring looks.
    focus-ring {
        // Uncomment this line to disable the focus ring.
        // off

        // How many logical pixels the ring extends out from the windows.
        width 4

        // Colors can be set in a variety of ways:
        // - CSS named colors: "red"
        // - RGB hex: "#rgb", "#rgba", "#rrggbb", "#rrggbbaa"
        // - CSS-like notation: "rgb(255, 127, 0)", rgba(), hsl() and a few others.

        // Color of the ring on the active monitor.
        active-color "#282828"

        // Color of the ring on inactive monitors.
        inactive-color "#282828"

        // Color for urgent windows (from sway's client.urgent)
        urgent-color "#282828"
    }

    // You can also add a border. It's similar to the focus ring, but always visible.
    border {
        // The settings are the same as for the focus ring.
        // If you enable the border, you probably want to disable the focus ring.
        off
    }

    // You can enable drop shadows for windows.
    shadow {
        // Uncomment the next line to enable shadows.
        on

        // By default, the shadow draws only around its window, and not behind it.
        // Uncomment this setting to make the shadow draw behind its window.
        //
        // Note that niri has no way of knowing about the CSD window corner
        // radius. It has to assume that windows have square corners, leading to
        // shadow artifacts inside the CSD rounded corners. This setting fixes
        // those artifacts.
        // 
        // However, instead you may want to set prefer-no-csd and/or
        // geometry-corner-radius. Then, niri will know the corner radius and
        // draw the shadow correctly, without having to draw it behind the
        // window. These will also remove client-side shadows if the window
        // draws any.
        // 
        // draw-behind-window true

        // You can change how shadows look. The values below are in logical
        // pixels and match the CSS box-shadow properties.

        // Softness controls the shadow blur radius.
        softness 30

        // Spread expands the shadow.
        spread 5

        // Offset moves the shadow relative to the window.
        offset x=0 y=5

        // You can also change the shadow color and opacity.
        color "#0007"
    }

    // Struts shrink the area occupied by windows, similarly to layer-shell panels.
    // You can think of them as a kind of outer gaps. They are set in logical pixels.
    // Left and right struts will cause the next window to the side to always be visible.
    // Top and bottom struts will simply add outer gaps in addition to the area occupied by
    // layer-shell panels and regular gaps.
    struts {
        // left 10
        // right 10
        // top 10
        // bottom 10
    }
}

// Named workspaces based on sway config
workspace "1" { open-on-output "HDMI-A-1"; }
workspace "2" { open-on-output "HDMI-A-1"; }
workspace "3" { open-on-output "HDMI-A-1"; }
workspace "4" { open-on-output "HDMI-A-1"; }
workspace "5" { open-on-output "HDMI-A-1"; }
workspace "6" { open-on-output "HDMI-A-1"; }
workspace "7" { open-on-output "eDP-1"; }
workspace "8" { open-on-output "eDP-1"; }
workspace "9" { open-on-output "eDP-1"; }
workspace "10" { open-on-output "eDP-1"; }

// Add lines like this to spawn processes at startup.
// Note that running niri as a session supports xdg-desktop-autostart,
// which may be more convenient to use.
// See the binds section below for more spawn examples.

// Autostart applications from sway config
spawn-at-startup "waybar"
spawn-at-startup "firefox"
spawn-at-startup "keepassxc"
spawn-at-startup "nm-applet"
spawn-at-startup "gammastep" "-PO" "4000"
spawn-at-startup "pomatez"
spawn-at-startup "vscodium"
spawn-at-startup "/usr/bin/wl-paste" "--watch" "/usr/bin/cliphist" "store"
spawn-at-startup "swaync" "-c" "/home/q/.config/swaync/config.jsonc"
spawn-at-startup "Telegram"
spawn-at-startup "/usr/bin/kdeconnectd"
// autotiling is a script for sway/i3 and is not needed in niri.
// spawn-at-startup "autotiling"
spawn-at-startup "bash" "-c" r#"swaybg -m fill -i "$(find ~/Wallpaper -type f \( -iname '*.png' -o -iname '*.jpg' -o -iname '*.jpeg' \) | shuf -n 1)""#


// Set cursor theme
cursor {
    xcursor-theme "default"
    xcursor-size 27
}

environment {
    DISPLAY ":0"
}

spawn-at-startup "xwayland-satellite"

hotkey-overlay {
	skip-at-startup
}


// Ask applications to use server-side decorations for a more minimal look
prefer-no-csd


// Uncomment this line to ask the clients to omit their client-side decorations if possible.
// If the client will specifically ask for CSD, the request will be honored.
// Additionally, clients will be informed that they are tiled, removing some client-side rounded corners.
// This option will also fix border/focus ring drawing behind some semitransparent windows.
// After enabling or disabling this, you need to restart the apps for this to take effect.
// prefer-no-csd

// You can change the path where screenshots are saved.
// A ~ at the front will be expanded to the home directory.
// The path is formatted with strftime(3) to give you the screenshot date and time.
screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"

// You can also set this to null to disable saving screenshots to disk.
// screenshot-path null

// Animation settings.
// The wiki explains how to configure individual animations:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Animations
animations {
    // Uncomment to turn off all animations.
    // off

    // Slow down all animations by this factor. Values below 1 speed them up instead.
    // slowdown 3.0
}

gestures {
    // Make drag-and-drop edge scrolling more responsive
    dnd-edge-view-scroll {
        trigger-width 100
        max-speed 3000
    }

    dnd-edge-workspace-switch {
        trigger-height 100
        max-speed 3000
    }

    // Enable hot corner to toggle overview by moving the mouse to the top-left corner.
    hot-corners {}
}

// Window rules let you adjust behavior for individual windows.
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Window-Rules

// Work around WezTerm's initial configure bug
// by setting an empty default-column-width.
window-rule {
    // This regular expression is intentionally made as specific as possible,
    // since this is the default config, and we want no false positives.
    // You can get away with just app-id="wezterm" if you want.
    match app-id=r#"^org\.wezfurlong\.wezterm$"#
    default-column-width {}
}

// Open the Firefox picture-in-picture player as floating by default.
window-rule {
    // This app-id regular expression will work for both:
    // - host Firefox (app-id is "firefox")
    // - Flatpak Firefox (app-id is "org.mozilla.firefox")
    match app-id=r#"firefox$"# title="^Picture-in-Picture$"
    open-floating true
}

// Open pavucontrol in floating mode
window-rule {
    match app-id="org.pulseaudio.pavucontrol"
    open-floating true
    default-column-width { fixed 600; }
    default-window-height { fixed 400; }
}

// Window rules for opening apps on specific workspaces
window-rule {
    match app-id="blueman"
    open-on-workspace "9"
}
window-rule {
    match app-id="firefox"
    open-on-workspace "1"
    default-column-width { proportion 1.0; }
}
window-rule {
    match app-id="pomatez"
    open-on-workspace "8"
}
window-rule {
    match app-id="org.keepassxc.KeePassXC"
    open-on-workspace "8"
}
window-rule {
    // Matched via class="VSCodium" in sway
    match app-id=r#"(?i)vscodium"#
    open-on-workspace "7"
    default-column-width { proportion 1.0; }
}

// Rules to focus specific apps on launch
window-rule {
    match app-id="pomatez"
}
window-rule {
    // Matched via class="VSCodium" in sway
    match app-id=r#"(?i)vscodium"#
    open-focused true
}

// Rule for layer-shell surfaces
layer-rule {
    // Place swaybg wallpaper within the overview backdrop for a nice effect.
    match namespace="swaybg"
    place-within-backdrop true
}

// Example: block out two password managers from screen capture.
// (This example rule is commented out with a "/-" in front.)
/-window-rule {
    match app-id=r#"^org\.keepassxc\.KeePassXC$"#
    match app-id=r#"^org\.gnome\.World\.Secrets$"#

    block-out-from "screen-capture"

    // Use this instead if you want them visible on third-party screenshot tools.
    // block-out-from "screencast"
}

// Example: enable rounded corners for all windows.
// (This example rule is commented out with a "/-" in front.)
window-rule {
    geometry-corner-radius 12
    clip-to-geometry true
}

binds {
    // Mod-Shift-/, which is usually the same as Mod-?,
    // shows a list of important hotkeys.
    Mod+Shift+Slash { show-hotkey-overlay; }

    // --- Custom binds from sway config ---
    Mod+Return { spawn "ghostty"; }
    Mod+Shift+O { spawn "obs"; }
    Mod+N { spawn "nemo"; }
    Mod+Shift+W { spawn "waveterm"; }
    Mod+Shift+I { spawn "inkscape"; }
    Mod+B { spawn "blender"; }
    Mod+Shift+R { spawn "reaper"; }
    Mod+D { spawn "wofi" "--show" "drun" "--height" "400" "--width" "600" "--hide-scroll"; }
    Mod+C { spawn "bash" "-c" "cliphist list | wofi --dmenu | cliphist decode | wl-copy"; }
    Mod+Space { spawn "/home/q/.config/waybar/scripts/windows.sh"; }
    Mod+A { spawn "/home/q/.config/waybar/scripts/screenshots.sh"; }
    Mod+Shift+Z { spawn "niri" "msg" "action" "reload-config"; }

    // --- Default binds (some modified) ---

    Super+Alt+L hotkey-overlay-title="Lock the Screen: swaylock" { spawn "swaylock"; }

    // Volume keys
    XF86AudioRaiseVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"; }
    XF86AudioLowerVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"; }
    XF86AudioMute        allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
    XF86AudioMicMute     allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }

    // Brightness keys
    XF86MonBrightnessUp   allow-when-locked=true { spawn "brightnessctl" "set" "5%+"; }
    XF86MonBrightnessDown allow-when-locked=true { spawn "brightnessctl" "set" "5%-"; }

    // Overview
    Mod+O repeat=false { toggle-overview; }

    // Close window
    Mod+Q { close-window; }

    // Focus
    Mod+Left  { focus-column-left; }
    Mod+Down  { focus-window-down; }
    Mod+Up    { focus-window-up; }
    Mod+Right { focus-column-right; }
    Mod+H     { focus-column-left; }
    Mod+J     { focus-window-down; }
    Mod+K     { focus-window-up; }
    Mod+L     { focus-column-right; }

    // Move window (modified to use Shift like in sway)
    Mod+Shift+Left  { move-column-left; }
    Mod+Shift+Down  { move-window-down; }
    Mod+Shift+Up    { move-window-up; }
    Mod+Shift+Right { move-column-right; }
    Mod+Shift+H     { move-column-left; }
    Mod+Shift+J     { move-window-down; }
    Mod+Shift+K     { move-window-up; }
    Mod+Shift+L     { move-column-right; }

    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Ctrl+Home { move-column-to-first; }
    Mod+Ctrl+End  { move-column-to-last; }

    // Focus monitor
    Mod+Ctrl+Left  { focus-monitor-left; }
    Mod+Ctrl+Down  { focus-monitor-down; }
    Mod+Ctrl+Up    { focus-monitor-up; }
    Mod+Ctrl+Right { focus-monitor-right; }

    // Move column to monitor
    Mod+Ctrl+Shift+Left  { move-column-to-monitor-left; }
    Mod+Ctrl+Shift+Down  { move-column-to-monitor-down; }
    Mod+Ctrl+Shift+Up    { move-column-to-monitor-up; }
    Mod+Ctrl+Shift+Right { move-column-to-monitor-right; }

    // Workspaces
    Mod+Page_Down      { focus-workspace-down; }
    Mod+Page_Up        { focus-workspace-up; }
    Mod+U              { focus-workspace-down; }
    Mod+I              { focus-workspace-up; }
    Mod+Ctrl+Page_Down { move-column-to-workspace-down; }
    Mod+Ctrl+Page_Up   { move-column-to-workspace-up; }
    Mod+Ctrl+U         { move-column-to-workspace-down; }
    Mod+Ctrl+I         { move-column-to-workspace-up; }

    Mod+Shift+Page_Down { move-workspace-down; }
    Mod+Shift+Page_Up   { move-workspace-up; }
    Mod+Shift+U         { move-workspace-down; }
    

    // Switch workspace by number
    Mod+1 { focus-workspace 1; }
    Mod+2 { focus-workspace 2; }
    Mod+3 { focus-workspace 3; }
    Mod+4 { focus-workspace 4; }
    Mod+5 { focus-workspace 5; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }
    Mod+0 { focus-workspace 10; }

    // Move column to workspace by number (modified to use Shift like in sway)
    Mod+Shift+1 { move-column-to-workspace 1; }
    Mod+Shift+2 { move-column-to-workspace 2; }
    Mod+Shift+3 { move-column-to-workspace 3; }
    Mod+Shift+4 { move-column-to-workspace 4; }
    Mod+Shift+5 { move-column-to-workspace 5; }
    Mod+Shift+6 { move-column-to-workspace 6; }
    Mod+Shift+7 { move-column-to-workspace 7; }
    Mod+Shift+8 { move-column-to-workspace 8; }
    Mod+Shift+9 { move-column-to-workspace 9; }
    Mod+Shift+0 { move-column-to-workspace 10; }

    // Window layout
    Mod+R { switch-preset-column-width; }
    Mod+Ctrl+R { reset-window-height; }
    Mod+F { fullscreen-window; } // from sway
    Mod+Shift+F { maximize-column; } // was Mod+F

    Mod+Shift+C { center-column; }
    Mod+Ctrl+C { center-visible-columns; }

    Mod+Minus { set-column-width "-10%"; }
    Mod+Equal { set-column-width "+10%"; }

    Mod+Shift+Minus { set-window-height "-10%"; }
    Mod+Shift+Equal { set-window-height "+10%"; }

    Mod+V       { toggle-window-floating; } // default
    Mod+Shift+V { switch-focus-between-floating-and-tiling; }

    Mod+W { toggle-column-tabbed-display; }

    // Screenshots
    Print { screenshot; }
    Ctrl+Print { screenshot-screen; }
    Alt+Print { screenshot-window; }

    // Exit
    Mod+Shift+E { quit; }
    Ctrl+Alt+Delete { quit; }

    // Power off monitors
    Mod+Shift+P { power-off-monitors; }
}
